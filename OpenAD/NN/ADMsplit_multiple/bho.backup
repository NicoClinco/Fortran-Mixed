
MODULE oad_intrinsics
  use OAD_active
  use w2f__types
  IMPLICIT NONE
  SAVE
  !
  !     **** Statements ****
  !
END MODULE oad_intrinsics

MODULE var
  use OAD_active
  use w2f__types
  use oad_intrinsics
  IMPLICIT NONE
  SAVE
  !
  !     **** Global Variables & Derived Type Definitions ****
  !
  REAL(w2f__8) B_LAYERS(:, :)
  ALLOCATABLE B_LAYERS
  INTEGER(w2f__i4) N_IN
  INTEGER(w2f__i4) N_LAYERS
  INTEGER(w2f__i4) N_OUT
  type(active) :: WB_GLOBAL(:)
  ALLOCATABLE WB_GLOBAL
  REAL(w2f__8) W_LAYERS(:, :, :)
  ALLOCATABLE W_LAYERS
  type(active) :: COST_FUN
  type(active) :: Y(:,:)
  ALLOCATABLE Y
  !
  !     **** Statements ****
  !
CONTAINS
  !#########################################################
  ! This file is part of OpenAD released under the LGPL.   #
  ! The full COPYRIGHT notice can be found in the top      #
  ! level directory of the OpenAD distribution             #
  !#########################################################

  SUBROUTINE INITLINEARLAYERS(NIN, NOUT, NLAYERS)
    use OAD_tape
    use OAD_rev

    ! original arguments get inserted before version
    !         ! and declared here together with all local variables
    !         ! generated by xaifBooster

    use w2f__types
    IMPLICIT NONE
    !
    !       **** Global Variables & Derived Type Definitions ****
    !
    INTEGER(w2f__i8) OpenAD_Symbol_0
    INTEGER(w2f__i8) OpenAD_Symbol_1
    INTEGER(w2f__i8) OpenAD_Symbol_2
    INTEGER(w2f__i8) OpenAD_Symbol_3
    INTEGER(w2f__i8) OpenAD_Symbol_4
    INTEGER(w2f__i8) OpenAD_Symbol_5
    !
    !       **** Parameters and Result ****
    !
    INTEGER(w2f__i4) NIN
    INTENT(IN) NIN
    INTEGER(w2f__i4) NOUT
    INTENT(IN) NOUT
    INTEGER(w2f__i4) NLAYERS
    INTENT(IN) NLAYERS
    !
    !       **** Local Variables and Functions ****
    !
    INTEGER(w2f__i4) I
    REAL(w2f__8) RND
    INTEGER(w2f__i4) OpenAD_Symbol_60


    integer iaddr
    external iaddr
    !
    !       **** Statements ****
    !

    if (our_rev_mode%plain) then
       ! original function
       N_IN = NIN
       N_OUT = NOUT
       N_LAYERS = NLAYERS
       ALLOCATE(WB_GLOBAL(N_LAYERS *(NOUT + NIN * NOUT)))
       ALLOCATE(W_LAYERS(N_OUT, N_IN, N_LAYERS), B_LAYERS(N_OUT, N_LAYERS))
       DO I = 1, (N_LAYERS *(NOUT + NIN * NOUT)), 1
          CALL RANDOM_NUMBER(RND)
          WB_GLOBAL(INT(I))%v = RND
       END DO
    end if
    if (our_rev_mode%tape) then
       ! taping
       N_IN = NIN
       N_OUT = NOUT
       N_LAYERS = NLAYERS
       ALLOCATE(WB_GLOBAL(N_LAYERS*(NOUT+NIN*NOUT)))
       ALLOCATE(W_LAYERS(N_OUT,N_IN,N_LAYERS),B_LAYERS(N_OUT,N_LAYERS))
       OpenAD_Symbol_2 = 0_w2f__i8
       DO I = 1,(N_LAYERS*(NOUT+NIN*NOUT)),1
          CALL RANDOM_NUMBER(RND)
          WB_GLOBAL(INT(I))%v = RND
          integer_tape(integer_tape_pointer) = I
          integer_tape_pointer = integer_tape_pointer+1
          OpenAD_Symbol_2 = (INT(OpenAD_Symbol_2)+INT(1_w2f__i8))
       END DO
       integer_tape(integer_tape_pointer) = OpenAD_Symbol_2
       integer_tape_pointer = integer_tape_pointer+1
    end if
    if (our_rev_mode%adjoint) then
       ! adjoint
       integer_tape_pointer = integer_tape_pointer-1
       OpenAD_Symbol_0 = integer_tape(integer_tape_pointer)
       OpenAD_Symbol_1 = 1
       do while (INT(OpenAD_Symbol_1).LE.INT(OpenAD_Symbol_0))
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_60 = integer_tape(integer_tape_pointer)
          WB_GLOBAL(OpenAD_Symbol_60)%d = 0.0d0
          OpenAD_Symbol_1 = INT(OpenAD_Symbol_1)+1
       END DO
    end if
  end subroutine INITLINEARLAYERS
  !#########################################################
  ! This file is part of OpenAD released under the LGPL.   #
  ! The full COPYRIGHT notice can be found in the top      #
  ! level directory of the OpenAD distribution             #
  !#########################################################

  SUBROUTINE GETLAYERINDEXES(NIN, NOUT, NLAYERS, I, J, ILAYER, GINDXS)
    use OAD_tape
    use OAD_rev

    ! original arguments get inserted before version
    !         ! and declared here together with all local variables
    !         ! generated by xaifBooster

    use w2f__types
    IMPLICIT NONE
    !
    !       **** Parameters and Result ****
    !
    INTEGER(w2f__i4) NIN
    INTEGER(w2f__i4) NOUT
    INTEGER(w2f__i4) NLAYERS
    INTEGER(w2f__i4) I
    INTEGER(w2f__i4) J
    INTEGER(w2f__i4) ILAYER
    INTEGER(w2f__i4) GINDXS(1 : 2)


    integer iaddr
    external iaddr
    !
    !       **** Statements ****
    !

    if (our_rev_mode%plain) then
       ! original function
       GINDXS(1) = (J + NIN *(I +(-1)) + NOUT * NIN *(ILAYER +(-1)))
       GINDXS(2) = (I + NOUT *(ILAYER + NIN * NLAYERS +(-1)))
    end if
    if (our_rev_mode%tape) then
       ! taping
       GINDXS(1) = (J + NIN *(I +(-1)) + NOUT * NIN *(ILAYER +(-1)))
       GINDXS(2) = (I + NOUT *(ILAYER + NIN * NLAYERS +(-1)))
    end if
    if (our_rev_mode%adjoint) then
       ! adjoint
    end if
  end subroutine GETLAYERINDEXES
END MODULE var
!#########################################################
! This file is part of OpenAD released under the LGPL.   #
! The full COPYRIGHT notice can be found in the top      #
! level directory of the OpenAD distribution             #
!#########################################################

SUBROUTINE forward(NB, X, EVAL_LOSS, YTRGT)
  use OAD_tape
  use OAD_rev

  ! original arguments get inserted before version
  !         ! and declared here together with all local variables
  !         ! generated by xaifBooster

  use OAD_active
  use w2f__types
  use oad_intrinsics
  use var ,only: B_LAYERS , COST_FUN , GETLAYERINDEXES , N_IN , N_LAYERS , N_OUT ,&
       & WB_GLOBAL , W_LAYERS,Y

  IMPLICIT NONE
  !
  !     **** Global Variables & Derived Type Definitions ****
  !
  INTEGER(w2f__i8) OpenAD_Symbol_10
  INTEGER(w2f__i8) OpenAD_Symbol_11
  INTEGER(w2f__i8) OpenAD_Symbol_12
  INTEGER(w2f__i8) OpenAD_Symbol_13
  INTEGER(w2f__i8) OpenAD_Symbol_14
  INTEGER(w2f__i8) OpenAD_Symbol_15
  INTEGER(w2f__i8) OpenAD_Symbol_16
  INTEGER(w2f__i8) OpenAD_Symbol_17
  INTEGER(w2f__i8) OpenAD_Symbol_18
  INTEGER(w2f__i8) OpenAD_Symbol_19
  INTEGER(w2f__i8) OpenAD_Symbol_20
  INTEGER(w2f__i8) OpenAD_Symbol_21
  INTEGER(w2f__i8) OpenAD_Symbol_22
  INTEGER(w2f__i8) OpenAD_Symbol_23
  INTEGER(w2f__i8) OpenAD_Symbol_24
  INTEGER(w2f__i8) OpenAD_Symbol_25
  INTEGER(w2f__i8) OpenAD_Symbol_26
  INTEGER(w2f__i8) OpenAD_Symbol_27
  INTEGER(w2f__i8) OpenAD_Symbol_28
  INTEGER(w2f__i8) OpenAD_Symbol_29
  INTEGER(w2f__i8) OpenAD_Symbol_30
  INTEGER(w2f__i8) OpenAD_Symbol_31
  INTEGER(w2f__i8) OpenAD_Symbol_32
  INTEGER(w2f__i8) OpenAD_Symbol_33
  INTEGER(w2f__i8) OpenAD_Symbol_34
  INTEGER(w2f__i8) OpenAD_Symbol_35
  INTEGER(w2f__i8) OpenAD_Symbol_36
  INTEGER(w2f__i8) OpenAD_Symbol_37
  INTEGER(w2f__i8) OpenAD_Symbol_38
  INTEGER(w2f__i8) OpenAD_Symbol_39
  INTEGER(w2f__i8) OpenAD_Symbol_40
  INTEGER(w2f__i8) OpenAD_Symbol_41
  INTEGER(w2f__i8) OpenAD_Symbol_42
  INTEGER(w2f__i8) OpenAD_Symbol_43
  INTEGER(w2f__i8) OpenAD_Symbol_44
  INTEGER(w2f__i8) OpenAD_Symbol_45
  INTEGER(w2f__i8) OpenAD_Symbol_46
  INTEGER(w2f__i8) OpenAD_Symbol_47
  INTEGER(w2f__i8) OpenAD_Symbol_6
  INTEGER(w2f__i8) OpenAD_Symbol_7
  INTEGER(w2f__i8) OpenAD_Symbol_8
  INTEGER(w2f__i8) OpenAD_Symbol_9
  !
  !     **** Parameters and Result ****
  !
  INTEGER(w2f__i4) NB
  REAL(w2f__8) X(1 : N_IN, 1 : NB)
  LOGICAL(w2f__i4) EVAL_LOSS
  INTENT(IN) EVAL_LOSS
  REAL(w2f__8) YTRGT(1 : N_OUT, 1 : NB)
  OPTIONAL YTRGT
  !
  !     **** Local Variables and Functions ****
  !
  INTEGER(w2f__i4) I
  INTEGER(w2f__i4) I1
  INTEGER(w2f__i4) I2
  INTEGER(w2f__i4) IB
  INTEGER(w2f__i4) ILAYER
  INTEGER(w2f__i4) J
  EXTERNAL lossfun
  type(active) :: ZBUF(1:N_OUT,1:NB)
  INTEGER(w2f__i4) OpenAD_Symbol_61
  INTEGER(w2f__i4) OpenAD_Symbol_62
  INTEGER(w2f__i4) OpenAD_Symbol_63
  INTEGER(w2f__i4) OpenAD_Symbol_64
  INTEGER(w2f__i4) OpenAD_Symbol_65
  REAL(w2f__8) OpenAD_Symbol_66
  INTEGER(w2f__i4) OpenAD_Symbol_67
  INTEGER(w2f__i4) OpenAD_Symbol_68
  INTEGER(w2f__i4) OpenAD_Symbol_69
  INTEGER(w2f__i4) OpenAD_Symbol_70
  INTEGER(w2f__i4) OpenAD_Symbol_71
  INTEGER(w2f__i4) OpenAD_Symbol_72
  INTEGER(w2f__i4) OpenAD_Symbol_73
  INTEGER(w2f__i4) OpenAD_Symbol_74
  INTEGER(w2f__i4) OpenAD_Symbol_75
  INTEGER(w2f__i4) OpenAD_Symbol_76
  INTEGER(w2f__i4) OpenAD_Symbol_77
  REAL(w2f__8) OpenAD_Symbol_78
  REAL(w2f__8) OpenAD_Symbol_79
  INTEGER(w2f__i4) OpenAD_Symbol_80
  INTEGER(w2f__i4) OpenAD_Symbol_81
  INTEGER(w2f__i4) OpenAD_Symbol_82
  REAL(w2f__8) OpenAD_lin_0
  REAL(w2f__8) OpenAD_lin_1
  REAL(w2f__8) OpenAD_lin_2
  type(active) :: OpenAD_prp_0
  type(active) :: OpenAD_prp_1
  type(active) :: OpenAD_prp_2
  type(active) :: OpenAD_prp_3
  !
  !     **** Top Level Pragmas ****
  !
  !$OPENAD INDEPENDENT(WB_GLOBAL)
  !$OPENAD DEPENDENT(COST_FUN)
  !
  !     **** Statements ****
  !


  integer iaddr
  external iaddr

  if (our_rev_mode%plain) then
     ! original function
     ZBUF(1:INT(N_OUT),1:INT(NB))%v = 0.0D00
     DO IB = 1,NB,1
        DO ILAYER = 1,N_LAYERS,1
           IF (ILAYER.eq.1) THEN
              DO I = 1,N_OUT,1
                 DO J = 1,N_IN,1
                    I1 = (J+N_IN*(I+(-1))+N_OUT*N_IN*(ILAYER+(-1)))
                    Y(INT(I),INT(IB))%v = (Y(I,IB)%v+WB_GLOBAL(I1)%v*X(J,IB))
                 END DO
                 I2 = (I+N_OUT*(ILAYER+N_IN*N_LAYERS+(-1)))
                 Y(INT(I),INT(IB))%v = (WB_GLOBAL(I2)%v+Y(I,IB)%v)
              END DO
           ELSE
              Y(1:INT(N_OUT),INT(IB))%v = 0.0D00
              DO I = 1,N_OUT,1
                 DO J = 1,N_IN,1
                    I1 = (J+N_IN*(I+(-1))+N_OUT*N_IN*(ILAYER+(-1)))
                    Y(INT(I),INT(IB))%v = (Y(I,IB)%v+WB_GLOBAL(I1)%v*ZBUF(J,IB)%v)
                 END DO
                 I2 = (I+N_OUT*(ILAYER+N_IN*N_LAYERS+(-1)))
                 Y(INT(I),INT(IB))%v = (WB_GLOBAL(I2)%v+Y(I,IB)%v)
              END DO
           ENDIF
           ZBUF(1:INT(N_OUT),INT(IB))%v = Y(1:N_OUT,IB)%v
        END DO
     END DO
     CALL lossfun(NB,Y,YTRGT,COST_FUN)
  end if
  if (our_rev_mode%tape) then
     ! taping
     ZBUF(1:INT(N_OUT),1:INT(NB))%v = 0.0D00
     integer_tape(integer_tape_pointer) = N_OUT
     integer_tape_pointer = integer_tape_pointer+1
     integer_tape(integer_tape_pointer) = NB
     integer_tape_pointer = integer_tape_pointer+1
     OpenAD_Symbol_19 = 0_w2f__i8
     DO IB = 1,NB,1
        OpenAD_Symbol_20 = 0_w2f__i8
        DO ILAYER = 1,N_LAYERS,1
           IF (ILAYER.eq.1) THEN
              OpenAD_Symbol_21 = 0_w2f__i8
              DO I = 1,N_OUT,1
                 OpenAD_Symbol_22 = 0_w2f__i8
                 DO J = 1,N_IN,1
                    I1 = (J+N_IN*(I+(-1))+N_OUT*N_IN*(ILAYER+(-1)))
                    OpenAD_lin_0 = X(J,IB)
                    Y(INT(I),INT(IB))%v = (Y(I,IB)%v+WB_GLOBAL(I1)%v*X(J,IB))
                    double_tape(double_tape_pointer) = OpenAD_lin_0
                    double_tape_pointer = double_tape_pointer+1
                    integer_tape(integer_tape_pointer) = I
                    integer_tape_pointer = integer_tape_pointer+1
                    integer_tape(integer_tape_pointer) = IB
                    integer_tape_pointer = integer_tape_pointer+1
                    integer_tape(integer_tape_pointer) = I1
                    integer_tape_pointer = integer_tape_pointer+1
                    OpenAD_Symbol_22 = (INT(OpenAD_Symbol_22)+INT(1_w2f__i8))
                 END DO
                 integer_tape(integer_tape_pointer) = OpenAD_Symbol_22
                 integer_tape_pointer = integer_tape_pointer+1
                 I2 = (I+N_OUT*(ILAYER+N_IN*N_LAYERS+(-1)))
                 Y(INT(I),INT(IB))%v = (WB_GLOBAL(I2)%v+Y(I,IB)%v)
                 integer_tape(integer_tape_pointer) = I
                 integer_tape_pointer = integer_tape_pointer+1
                 integer_tape(integer_tape_pointer) = IB
                 integer_tape_pointer = integer_tape_pointer+1
                 integer_tape(integer_tape_pointer) = I2
                 integer_tape_pointer = integer_tape_pointer+1
                 OpenAD_Symbol_21 = (INT(OpenAD_Symbol_21)+INT(1_w2f__i8))
              END DO
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_21
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_25 = 1_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_25
              integer_tape_pointer = integer_tape_pointer+1
           ELSE
              Y(1:INT(N_OUT),INT(IB))%v = 0.0D00
              integer_tape(integer_tape_pointer) = N_OUT
              integer_tape_pointer = integer_tape_pointer+1
              integer_tape(integer_tape_pointer) = IB
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_23 = 0_w2f__i8
              DO I = 1,N_OUT,1
                 OpenAD_Symbol_24 = 0_w2f__i8
                 DO J = 1,N_IN,1
                    I1 = (J+N_IN*(I+(-1))+N_OUT*N_IN*(ILAYER+(-1)))
                    OpenAD_lin_1 = ZBUF(J,IB)%v
                    OpenAD_lin_2 = WB_GLOBAL(I1)%v
                    Y(INT(I),INT(IB))%v = (Y(I,IB)%v+WB_GLOBAL(I1)%v*ZBUF(J,IB)%v)
                    double_tape(double_tape_pointer) = OpenAD_lin_1
                    double_tape_pointer = double_tape_pointer+1
                    double_tape(double_tape_pointer) = OpenAD_lin_2
                    double_tape_pointer = double_tape_pointer+1
                    integer_tape(integer_tape_pointer) = I
                    integer_tape_pointer = integer_tape_pointer+1
                    integer_tape(integer_tape_pointer) = IB
                    integer_tape_pointer = integer_tape_pointer+1
                    integer_tape(integer_tape_pointer) = I1
                    integer_tape_pointer = integer_tape_pointer+1
                    integer_tape(integer_tape_pointer) = J
                    integer_tape_pointer = integer_tape_pointer+1
                    OpenAD_Symbol_24 = (INT(OpenAD_Symbol_24)+INT(1_w2f__i8))
                 END DO
                 integer_tape(integer_tape_pointer) = OpenAD_Symbol_24
                 integer_tape_pointer = integer_tape_pointer+1
                 I2 = (I+N_OUT*(ILAYER+N_IN*N_LAYERS+(-1)))
                 Y(INT(I),INT(IB))%v = (WB_GLOBAL(I2)%v+Y(I,IB)%v)
                 integer_tape(integer_tape_pointer) = I
                 integer_tape_pointer = integer_tape_pointer+1
                 integer_tape(integer_tape_pointer) = IB
                 integer_tape_pointer = integer_tape_pointer+1
                 integer_tape(integer_tape_pointer) = I2
                 integer_tape_pointer = integer_tape_pointer+1
                 OpenAD_Symbol_23 = (INT(OpenAD_Symbol_23)+INT(1_w2f__i8))
              END DO
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_23
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_26 = 0_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_26
              integer_tape_pointer = integer_tape_pointer+1
           ENDIF
           ZBUF(1:INT(N_OUT),INT(IB))%v = Y(1:N_OUT,IB)%v
           integer_tape(integer_tape_pointer) = N_OUT
           integer_tape_pointer = integer_tape_pointer+1
           integer_tape(integer_tape_pointer) = IB
           integer_tape_pointer = integer_tape_pointer+1
           OpenAD_Symbol_20 = (INT(OpenAD_Symbol_20)+INT(1_w2f__i8))
        END DO
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_20
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_19 = (INT(OpenAD_Symbol_19)+INT(1_w2f__i8))
     END DO
     integer_tape(integer_tape_pointer) = OpenAD_Symbol_19
     integer_tape_pointer = integer_tape_pointer+1
     CALL lossfun(NB,Y,YTRGT,COST_FUN)
     integer_tape(integer_tape_pointer) = N_OUT
     integer_tape_pointer = integer_tape_pointer+1
     integer_tape(integer_tape_pointer) = NB
     integer_tape_pointer = integer_tape_pointer+1
  end if
  if (our_rev_mode%adjoint) then
     ! adjoint
     integer_tape_pointer = integer_tape_pointer-1
     !NB = integer_tape(integer_tape_pointer)
     integer_tape_pointer = integer_tape_pointer-1
     !N_OUT = integer_tape(integer_tape_pointer)
     CALL lossfun(NB,Y,YTRGT,COST_FUN)
     integer_tape_pointer = integer_tape_pointer-1
     OpenAD_Symbol_6 = integer_tape(integer_tape_pointer)
     OpenAD_Symbol_7 = 1
     do while (INT(OpenAD_Symbol_7).LE.INT(OpenAD_Symbol_6))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_8 = integer_tape(integer_tape_pointer)
        OpenAD_Symbol_9 = 1
        do while (INT(OpenAD_Symbol_9).LE.INT(OpenAD_Symbol_8))
           integer_tape_pointer = integer_tape_pointer-1
           OpenAD_Symbol_70 = integer_tape(integer_tape_pointer)
           integer_tape_pointer = integer_tape_pointer-1
           OpenAD_Symbol_71 = integer_tape(integer_tape_pointer)
           Y(1:OpenAD_Symbol_71,OpenAD_Symbol_70)%d = Y(1:OpenAD_Symbol_71,OpenAD_Symbo&
                &l_70)%d+ZBUF(1:OpenAD_Symbol_71,OpenAD_Symbol_70)%d

           ZBUF(1:OpenAD_Symbol_71,OpenAD_Symbol_70)%d = 0.0d0
           integer_tape_pointer = integer_tape_pointer-1
           OpenAD_Symbol_10 = integer_tape(integer_tape_pointer)
           IF (OpenAD_Symbol_10.ne.0) THEN
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_15 = integer_tape(integer_tape_pointer)
              OpenAD_Symbol_16 = 1
              do while (INT(OpenAD_Symbol_16).LE.INT(OpenAD_Symbol_15))
                 integer_tape_pointer = integer_tape_pointer-1
                 OpenAD_Symbol_67 = integer_tape(integer_tape_pointer)
                 integer_tape_pointer = integer_tape_pointer-1
                 OpenAD_Symbol_68 = integer_tape(integer_tape_pointer)
                 integer_tape_pointer = integer_tape_pointer-1
                 OpenAD_Symbol_69 = integer_tape(integer_tape_pointer)
                 OpenAD_prp_1%d = OpenAD_prp_1%d+Y(OpenAD_Symbol_69,OpenAD_Symbol_68)%d
                 WB_GLOBAL(OpenAD_Symbol_67)%d = WB_GLOBAL(OpenAD_Symbol_67)%d+Y(OpenAD_S&
                      &ymbol_69,OpenAD_Symbol_68)%d

                 Y(OpenAD_Symbol_69,OpenAD_Symbol_68)%d = 0.0d0
                 Y(OpenAD_Symbol_69,OpenAD_Symbol_68)%d = Y(OpenAD_Symbol_69,OpenAD_Symbo&
                      &l_68)%d+OpenAD_prp_1%d

                 OpenAD_prp_1%d = 0.0d0
                 integer_tape_pointer = integer_tape_pointer-1
                 OpenAD_Symbol_17 = integer_tape(integer_tape_pointer)
                 OpenAD_Symbol_18 = 1
                 do while (INT(OpenAD_Symbol_18).LE.INT(OpenAD_Symbol_17))
                    integer_tape_pointer = integer_tape_pointer-1
                    OpenAD_Symbol_63 = integer_tape(integer_tape_pointer)
                    integer_tape_pointer = integer_tape_pointer-1
                    OpenAD_Symbol_64 = integer_tape(integer_tape_pointer)
                    integer_tape_pointer = integer_tape_pointer-1
                    OpenAD_Symbol_65 = integer_tape(integer_tape_pointer)
                    double_tape_pointer = double_tape_pointer-1
                    OpenAD_Symbol_66 = double_tape(double_tape_pointer)
                    WB_GLOBAL(OpenAD_Symbol_63)%d = WB_GLOBAL(OpenAD_Symbol_63)%d+Y(OpenAD&
                         &_Symbol_65,OpenAD_Symbol_64)%d*(OpenAD_Symbol_66)

                    OpenAD_prp_0%d = OpenAD_prp_0%d+Y(OpenAD_Symbol_65,OpenAD_Symbol_64)%d
                    Y(OpenAD_Symbol_65,OpenAD_Symbol_64)%d = 0.0d0
                    Y(OpenAD_Symbol_65,OpenAD_Symbol_64)%d = Y(OpenAD_Symbol_65,OpenAD_Sym&
                         &bol_64)%d+OpenAD_prp_0%d

                    OpenAD_prp_0%d = 0.0d0
                    OpenAD_Symbol_18 = INT(OpenAD_Symbol_18)+1
                 END DO
                 OpenAD_Symbol_16 = INT(OpenAD_Symbol_16)+1
              END DO
           ELSE
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_11 = integer_tape(integer_tape_pointer)
              OpenAD_Symbol_12 = 1
              do while (INT(OpenAD_Symbol_12).LE.INT(OpenAD_Symbol_11))
                 integer_tape_pointer = integer_tape_pointer-1
                 OpenAD_Symbol_80 = integer_tape(integer_tape_pointer)
                 integer_tape_pointer = integer_tape_pointer-1
                 OpenAD_Symbol_81 = integer_tape(integer_tape_pointer)
                 integer_tape_pointer = integer_tape_pointer-1
                 OpenAD_Symbol_82 = integer_tape(integer_tape_pointer)
                 OpenAD_prp_3%d = OpenAD_prp_3%d+Y(OpenAD_Symbol_82,OpenAD_Symbol_81)%d
                 WB_GLOBAL(OpenAD_Symbol_80)%d = WB_GLOBAL(OpenAD_Symbol_80)%d+Y(OpenAD_S&
                      &ymbol_82,OpenAD_Symbol_81)%d

                 Y(OpenAD_Symbol_82,OpenAD_Symbol_81)%d = 0.0d0
                 Y(OpenAD_Symbol_82,OpenAD_Symbol_81)%d = Y(OpenAD_Symbol_82,OpenAD_Symbo&
                      &l_81)%d+OpenAD_prp_3%d

                 OpenAD_prp_3%d = 0.0d0
                 integer_tape_pointer = integer_tape_pointer-1
                 OpenAD_Symbol_13 = integer_tape(integer_tape_pointer)
                 OpenAD_Symbol_14 = 1
                 do while (INT(OpenAD_Symbol_14).LE.INT(OpenAD_Symbol_13))
                    integer_tape_pointer = integer_tape_pointer-1
                    OpenAD_Symbol_74 = integer_tape(integer_tape_pointer)
                    integer_tape_pointer = integer_tape_pointer-1
                    OpenAD_Symbol_75 = integer_tape(integer_tape_pointer)
                    integer_tape_pointer = integer_tape_pointer-1
                    OpenAD_Symbol_76 = integer_tape(integer_tape_pointer)
                    integer_tape_pointer = integer_tape_pointer-1
                    OpenAD_Symbol_77 = integer_tape(integer_tape_pointer)
                    double_tape_pointer = double_tape_pointer-1
                    OpenAD_Symbol_78 = double_tape(double_tape_pointer)
                    double_tape_pointer = double_tape_pointer-1
                    OpenAD_Symbol_79 = double_tape(double_tape_pointer)
                    ZBUF(OpenAD_Symbol_74,OpenAD_Symbol_76)%d = ZBUF(OpenAD_Symbol_74,Open&
                         &AD_Symbol_76)%d+Y(OpenAD_Symbol_77,OpenAD_Symbol_76)%d*(OpenAD_Symbol_78)

                    WB_GLOBAL(OpenAD_Symbol_75)%d = WB_GLOBAL(OpenAD_Symbol_75)%d+Y(OpenAD&
                         &_Symbol_77,OpenAD_Symbol_76)%d*(OpenAD_Symbol_79)

                    OpenAD_prp_2%d = OpenAD_prp_2%d+Y(OpenAD_Symbol_77,OpenAD_Symbol_76)%d
                    Y(OpenAD_Symbol_77,OpenAD_Symbol_76)%d = 0.0d0
                    Y(OpenAD_Symbol_77,OpenAD_Symbol_76)%d = Y(OpenAD_Symbol_77,OpenAD_Sym&
                         &bol_76)%d+OpenAD_prp_2%d

                    OpenAD_prp_2%d = 0.0d0
                    OpenAD_Symbol_14 = INT(OpenAD_Symbol_14)+1
                 END DO
                 OpenAD_Symbol_12 = INT(OpenAD_Symbol_12)+1
              END DO
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_72 = integer_tape(integer_tape_pointer)
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_73 = integer_tape(integer_tape_pointer)
              Y(1:OpenAD_Symbol_73,OpenAD_Symbol_72)%d = 0.0d0
           ENDIF
           OpenAD_Symbol_9 = INT(OpenAD_Symbol_9)+1
        END DO
        OpenAD_Symbol_7 = INT(OpenAD_Symbol_7)+1
     END DO
     integer_tape_pointer = integer_tape_pointer-1
     OpenAD_Symbol_61 = integer_tape(integer_tape_pointer)
     integer_tape_pointer = integer_tape_pointer-1
     OpenAD_Symbol_62 = integer_tape(integer_tape_pointer)
     ZBUF(1:OpenAD_Symbol_62,1:OpenAD_Symbol_61)%d = 0.0d0
  end if
  end subroutine forward
!#########################################################
! This file is part of OpenAD released under the LGPL.   #
! The full COPYRIGHT notice can be found in the top      #
! level directory of the OpenAD distribution             #
!#########################################################

SUBROUTINE lossfun(NB, Y, YTRGT, LF)
    use OAD_tape
    use OAD_rev

! original arguments get inserted before version
!         ! and declared here together with all local variables
!         ! generated by xaifBooster

use OAD_active
use w2f__types
use oad_intrinsics
use var ,only: N_OUT
use oad_intrinsics
use var ,only: N_OUT
use oad_intrinsics
use var ,only: N_OUT
IMPLICIT NONE
!
!     **** Global Variables & Derived Type Definitions ****
!
INTEGER(w2f__i8) OpenAD_Symbol_48
INTEGER(w2f__i8) OpenAD_Symbol_49
INTEGER(w2f__i8) OpenAD_Symbol_50
INTEGER(w2f__i8) OpenAD_Symbol_51
INTEGER(w2f__i8) OpenAD_Symbol_52
INTEGER(w2f__i8) OpenAD_Symbol_53
INTEGER(w2f__i8) OpenAD_Symbol_54
INTEGER(w2f__i8) OpenAD_Symbol_55
INTEGER(w2f__i8) OpenAD_Symbol_56
INTEGER(w2f__i8) OpenAD_Symbol_57
INTEGER(w2f__i8) OpenAD_Symbol_58
INTEGER(w2f__i8) OpenAD_Symbol_59
!
!     **** Parameters and Result ****
!
INTEGER(w2f__i4) NB
type(active) :: Y(1:N_OUT,1:NB)
REAL(w2f__8) YTRGT(1 : N_OUT, 1 : NB)
type(active) :: LF
!
!     **** Local Variables and Functions ****
!
INTEGER(w2f__i4) IB
INTEGER(w2f__i4) J
REAL(w2f__8) RNB
INTEGER(w2f__i4) OpenAD_Symbol_83
INTEGER(w2f__i4) OpenAD_Symbol_84
REAL(w2f__8) OpenAD_Symbol_85
REAL(w2f__8) OpenAD_Symbol_86
REAL(w2f__8) OpenAD_Symbol_87
REAL(w2f__8) OpenAD_aux_0
REAL(w2f__8) OpenAD_aux_1
REAL(w2f__8) OpenAD_lin_3
REAL(w2f__8) OpenAD_lin_4
REAL(w2f__8) OpenAD_lin_5
type(active) :: OpenAD_prp_4
type(active) :: OpenAD_prp_5
!
!     **** Statements ****
!


    integer iaddr
    external iaddr

   if (our_rev_mode%plain) then
! original function
LF%v = 0.0D00
RNB = (1.0D00/REAL(NB,8))
DO IB = 1,NB,1
  DO J = 1,N_OUT,1
    LF%v = (LF%v+(Y(J,IB)%v-YTRGT(J,IB))*(Y(J,IB)%v-YTRGT(J,IB)))
  END DO
END DO
LF%v = (LF%v*RNB)
    end if
    if (our_rev_mode%tape) then
! taping
LF%v = 0.0D00
RNB = (1.0D00/REAL(NB,8))
OpenAD_Symbol_52 = 0_w2f__i8
DO IB = 1,NB,1
  OpenAD_Symbol_53 = 0_w2f__i8
  DO J = 1,N_OUT,1
    OpenAD_aux_0 = (Y(J,IB)%v-YTRGT(J,IB))
    OpenAD_aux_1 = (Y(J,IB)%v-YTRGT(J,IB))
    OpenAD_lin_3 = OpenAD_aux_1
    OpenAD_lin_4 = OpenAD_aux_0
    LF%v = (LF%v+OpenAD_aux_0*OpenAD_aux_1)
    double_tape(double_tape_pointer) = OpenAD_lin_3
    double_tape_pointer = double_tape_pointer+1
    double_tape(double_tape_pointer) = OpenAD_lin_4
    double_tape_pointer = double_tape_pointer+1
    integer_tape(integer_tape_pointer) = J
    integer_tape_pointer = integer_tape_pointer+1
    integer_tape(integer_tape_pointer) = IB
    integer_tape_pointer = integer_tape_pointer+1
    OpenAD_Symbol_53 = (INT(OpenAD_Symbol_53)+INT(1_w2f__i8))
  END DO
  integer_tape(integer_tape_pointer) = OpenAD_Symbol_53
  integer_tape_pointer = integer_tape_pointer+1
  OpenAD_Symbol_52 = (INT(OpenAD_Symbol_52)+INT(1_w2f__i8))
END DO
integer_tape(integer_tape_pointer) = OpenAD_Symbol_52
integer_tape_pointer = integer_tape_pointer+1
OpenAD_lin_5 = RNB
LF%v = (LF%v*RNB)
double_tape(double_tape_pointer) = OpenAD_lin_5
double_tape_pointer = double_tape_pointer+1
    end if
    if (our_rev_mode%adjoint) then
! adjoint
double_tape_pointer = double_tape_pointer-1
OpenAD_Symbol_87 = double_tape(double_tape_pointer)
OpenAD_prp_5%d = OpenAD_prp_5%d+LF%d*(OpenAD_Symbol_87)
LF%d = 0.0d0
LF%d = LF%d+OpenAD_prp_5%d
OpenAD_prp_5%d = 0.0d0
integer_tape_pointer = integer_tape_pointer-1
OpenAD_Symbol_48 = integer_tape(integer_tape_pointer)
OpenAD_Symbol_49 = 1
do while (INT(OpenAD_Symbol_49).LE.INT(OpenAD_Symbol_48))
  integer_tape_pointer = integer_tape_pointer-1
  OpenAD_Symbol_50 = integer_tape(integer_tape_pointer)
  OpenAD_Symbol_51 = 1
  do while (INT(OpenAD_Symbol_51).LE.INT(OpenAD_Symbol_50))
    integer_tape_pointer = integer_tape_pointer-1
    OpenAD_Symbol_83 = integer_tape(integer_tape_pointer)
    integer_tape_pointer = integer_tape_pointer-1
    OpenAD_Symbol_84 = integer_tape(integer_tape_pointer)
    double_tape_pointer = double_tape_pointer-1
    OpenAD_Symbol_85 = double_tape(double_tape_pointer)
    double_tape_pointer = double_tape_pointer-1
    OpenAD_Symbol_86 = double_tape(double_tape_pointer)
    Y(OpenAD_Symbol_84,OpenAD_Symbol_83)%d = Y(OpenAD_Symbol_84,OpenAD_Symbol_83&
     &)%d+LF%d*(OpenAD_Symbol_85)

    Y(OpenAD_Symbol_84,OpenAD_Symbol_83)%d = Y(OpenAD_Symbol_84,OpenAD_Symbol_83&
     &)%d+LF%d*(OpenAD_Symbol_86)

    OpenAD_prp_4%d = OpenAD_prp_4%d+LF%d
    LF%d = 0.0d0
    LF%d = LF%d+OpenAD_prp_4%d
    OpenAD_prp_4%d = 0.0d0
    OpenAD_Symbol_51 = INT(OpenAD_Symbol_51)+1
  END DO
  OpenAD_Symbol_49 = INT(OpenAD_Symbol_49)+1
END DO
LF%d = 0.0d0
    end if
  end subroutine lossfun
